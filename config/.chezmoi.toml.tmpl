{{- /* Setup script adapted from https://github.com/mikegreiling/dotfiles */ -}}

{{- /* Determine if interactive or force mode */ -}}
{{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
{{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}
{{- $headless := or (env "SSH_CLIENT" | not | not) (not (or (env "DISPLAY") (env "WAYLAND_DISPLAY"))) -}}

{{- /* Initialize variables with defaults */ -}}
{{- $full_name := "" -}}
{{- $email := "" -}}
{{- $computer_name := "" -}}
{{- $hostname := .chezmoi.hostname -}}
{{- $gpgkey := "" -}}

{{- /* Combine OS and Linux distribution */ -}}
{{- $osid := .chezmoi.os -}}
{{- if hasKey .chezmoi.osRelease "id" -}}
{{-   $osid = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{- end -}}

{{- /* OS-specific defaults */ -}}
{{- if eq $osid "darwin" -}}
{{-   $computer_name = output "scutil" "--get" "ComputerName" | trim -}}
{{-   $hostname = output "scutil" "--get" "LocalHostName" | trim -}}
{{- else if eq $osid "linux-ubuntu" -}}
{{-   $computer_name = output "hostnamectl" "--static" | trim -}}
{{- else if eq $osid "windows" -}}
{{-   $hostname = output "hostname" | trim -}}
{{- end -}}

{{- /* Preserve existing values from configuration */ -}}
{{- if hasKey . "full_name" -}} {{- $full_name = .full_name -}} {{- end -}}
{{- if hasKey . "email" -}} {{- $email = .email -}} {{- end -}}
{{- if hasKey . "computer_name" -}} {{- $computer_name = .computer_name -}} {{- end -}}
{{- if hasKey . "hostname" -}} {{- $hostname = .hostname -}} {{- end -}}
{{- if hasKey . "gpgkey" -}} {{- $gpgkey = .gpgkey -}} {{- end -}}

{{- if $interactive -}}

{{- /* Prompt for full name */ -}}
{{- range $i := until 99 -}}
{{-   $question := "> Enter full name (for git config):" -}}
{{-   $answer := "" -}}
{{-   if $full_name -}}
{{-     $answer = promptString $question $full_name -}}
{{-   else -}}
{{-     $answer = promptString $question -}}
{{-   end -}}
{{-   if regexMatch "^[A-Z][-' a-zA-Z]+$" $answer -}}
{{-     $full_name = $answer -}}
{{-     writeToStdout (printf "‚úÖ Full name set as '%s'\n" $full_name) -}}
{{-     break -}}
{{-   end -}}
{{-   writeToStdout (printf "‚ùå '%s' is invalid. Try again.\n" $answer) -}}
{{-   if eq $i 98 -}}
{{-     writeToStdout "‚ùå ERROR: Maximum attempts exceeded.\n" -}}
{{-     exit 1 -}}
{{-   end -}}
{{- end -}}

{{- /* Prompt for email */ -}}
{{- range $i := until 99 -}}
{{-   $question := "> Enter email address (for git config):" -}}
{{-   $answer := "" -}}
{{-   if $email -}}
{{-     $answer = promptString $question $email -}}
{{-   else -}}
{{-     $answer = promptString $question -}}
{{-   end -}}
{{-   $answer = lower $answer -}}
{{-   if regexMatch "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$" $answer -}}
{{-     $email = $answer -}}
{{-     writeToStdout (printf "‚úÖ Email set as '%s'\n" $email) -}}
{{-     break -}}
{{-   end -}}
{{-   writeToStdout (printf "‚ùå '%s' is invalid. Try again.\n" $answer) -}}
{{-   if eq $i 98 -}}
{{-     writeToStdout "‚ùå ERROR: Maximum attempts exceeded.\n" -}}
{{-     exit 1 -}}
{{-   end -}}
{{- end -}}

{{- /* Prompt for computer name */ -}}
{{- range $i := until 99 -}}
{{-   $question := "> Enter computer name (for network services):" -}}
{{-   $answer := "" -}}
{{-   if $computer_name -}}
{{-     $answer = promptString $question $computer_name -}}
{{-   else -}}
{{-     $answer = promptString $question -}}
{{-   end -}}
{{-   if regexMatch "^[a-zA-Z0-9][-' a-zA-Z0-9]+$" $answer -}}
{{-     $computer_name = $answer -}}
{{-     writeToStdout (printf "‚úÖ Computer name set as '%s'\n" $computer_name) -}}
{{-     break -}}
{{-   end -}}
{{-   writeToStdout (printf "‚ùå '%s' is invalid. Try again.\n" $answer) -}}
{{-   if eq $i 98 -}}
{{-     writeToStdout "‚ùå ERROR: Maximum attempts exceeded.\n" -}}
{{-     exit 1 -}}
{{-   end -}}
{{- end -}}

{{- /* Prompt for hostname */ -}}
{{- range $i := until 99 -}}
{{-   $question := "> Enter hostname (lowercase, no spaces):" -}}
{{-   $answer := "" -}}
{{-   if $hostname -}}
{{-     $answer = promptString $question $hostname -}}
{{-   else -}}
{{-     $answer = promptString $question -}}
{{-   end -}}
{{-   if regexMatch "^[a-zA-Z0-9][-_a-zA-Z0-9]*$" $answer -}}
{{-     $hostname = $answer -}}
{{-     writeToStdout (printf "‚úÖ Hostname set as '%s'\n" $hostname) -}}
{{-     break -}}
{{-   end -}}
{{-   writeToStdout (printf "‚ùå '%s' is invalid. Try again.\n" $answer) -}}
{{-   if eq $i 98 -}}
{{-     writeToStdout "‚ùå ERROR: Maximum attempts exceeded.\n" -}}
{{-     exit 1 -}}
{{-   end -}}
{{- end -}}

{{- /* Prompt for GPG key */ -}}
{{- range $i := until 99 -}}
{{-   $question := "> Enter GPG key (leave empty to skip):" -}}
{{-   $answer := "" -}}
{{-   if $gpgkey -}}
{{-     $answer = promptString $question $gpgkey -}}
{{-   else -}}
{{-     $answer = promptString $question -}}
{{-   end -}}
{{-   if regexMatch "^(|[A-F0-9]{8,16})$" $answer -}}
{{-     $gpgkey = $answer -}}
{{-     writeToStdout (printf "‚úÖ GPG key set as '%s'\n" $gpgkey) -}}
{{-     break -}}
{{-   end -}}
{{-   writeToStdout (printf "‚ùå '%s' is invalid. Try again.\n" $answer) -}}
{{-   if eq $i 98 -}}
{{-     writeToStdout "‚ùå ERROR: Maximum attempts exceeded.\n" -}}
{{-     exit 1 -}}
{{-   end -}}
{{- end -}}

{{- writeToStdout "\nüí° Configuration complete! Re-run `chezmoi init` without `--force` to modify these settings.\n" -}}

{{- end -}}

sourceDir = {{ .chezmoi.workingTree | quote }}

verbose = true

encryption = "age"

[age]
  identity = "~/.config/chezmoi/key.txt"
  recipient = "age19eu7nu9yy05rc6f5guv27husehtddlm50s6hmuf8hda0zklpzucs6lzpw6"

[diff]
  pager = "diff-so-fancy"
  exclude = ["scripts"]

[status]
  exclude = ["always"]

[data]
  full_name = {{ $full_name | quote }}
  email = {{ $email | quote }}
  computer_name = {{ $computer_name | quote }}
  hostname = {{ $hostname | quote }}
  gpgkey = {{ $gpgkey | quote }}
  osid = {{ $osid | quote }}
